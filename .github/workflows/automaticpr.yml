name: Auto Create Pull Request

on:
  push:
    branches:
      - 'feature/**'  # Triggers para branches que começam com 'feature/'
      - 'developer'   # Trigger para a branch developer
    # Removido branches-ignore - não pode usar ambos no mesmo evento

jobs:
  test-and-create-pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch todo o histórico para comparar branches
    
    # Setup para Java 21
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Find Maven project directory
      id: find-maven
      run: |
        echo "🔍 Procurando por pom.xml..."
        if [ -f "plus/pom.xml" ]; then
          echo "📁 pom.xml encontrado em plus/"
          echo "maven_dir=plus" >> $GITHUB_OUTPUT
        elif [ -f "pom.xml" ]; then
          echo "📁 pom.xml encontrado na raiz"
          echo "maven_dir=." >> $GITHUB_OUTPUT
        elif [ -f "backend/pom.xml" ]; then
          echo "📁 pom.xml encontrado em backend/"
          echo "maven_dir=backend" >> $GITHUB_OUTPUT
        elif [ -f "server/pom.xml" ]; then
          echo "📁 pom.xml encontrado em server/"
          echo "maven_dir=server" >> $GITHUB_OUTPUT
        elif [ -f "api/pom.xml" ]; then
          echo "📁 pom.xml encontrado em api/"
          echo "maven_dir=api" >> $GITHUB_OUTPUT
        else
          echo "❌ pom.xml não encontrado!"
          echo "📂 Estrutura do projeto:"
          find . -name "pom.xml" -type f | head -10
          echo "📂 Conteúdo da raiz:"
          ls -la
          exit 1
        fi

    - name: Install dependencies and compile
      run: |
        echo "📦 Instalando dependências e compilando..."
        cd ${{ steps.find-maven.outputs.maven_dir }}
        
        # Compilação com mais detalhes para debug
        mvn clean compile \
          -DskipTests=true \
          --batch-mode \
          --no-transfer-progress \
          -e
          
        echo "✅ Compilação concluída!"
        
        # Verifica se há problemas de dependências
        echo "🔍 Verificando árvore de dependências..."
        mvn dependency:tree -Dscope=test | head -20
    
    - name: Setup test environment
      run: |
        echo "🔧 Configurando ambiente de teste..."
        cd ${{ steps.find-maven.outputs.maven_dir }}
        
        # Cria perfil de teste se não existir
        if [ ! -f "src/main/resources/application-test.properties" ] && [ ! -f "src/main/resources/application-test.yml" ]; then
          echo "📝 Criando configuração de teste básica..."
          mkdir -p src/test/resources
          cat > src/test/resources/application-test.properties << EOF
# Configuração básica para testes
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=DEBUG
EOF
        fi
        
        # Verifica se há testes para executar
        echo "🔍 Verificando testes disponíveis..."
        TEST_COUNT=$(find src/test -name "*.java" -type f | wc -l)
        echo "📊 Encontrados $TEST_COUNT arquivos de teste"
        
        if [ "$TEST_COUNT" -eq 0 ]; then
          echo "⚠️ Nenhum teste encontrado - pulando execução de testes"
          echo "skip_tests=true" >> $GITHUB_ENV
        else
          echo "skip_tests=false" >> $GITHUB_ENV
        fi

    - name: Run tests
      if: env.skip_tests != 'true'
      run: |
        echo "🧪 Executando testes unitários..."
        cd ${{ steps.find-maven.outputs.maven_dir }}
        
        # Executa testes com configurações mais detalhadas
        mvn test \
          -Dmaven.test.failure.ignore=false \
          -Dsurefire.useFile=false \
          -Dspring.profiles.active=test \
          --batch-mode \
          --no-transfer-progress \
          -e
        
        echo "✅ Todos os testes passaram!"
      continue-on-error: false
      
    - name: Skip tests notification
      if: env.skip_tests == 'true'
      run: |
        echo "ℹ️ Nenhum teste encontrado - pulando execução de testes"
        echo "💡 Considere adicionar testes ao seu projeto em src/test/java/"
    
    # Verificações adicionais para projetos Java
    - name: Generate test report
      if: always()  # Sempre executa mesmo se os testes falharem
      run: |
        echo "📊 Gerando relatório de testes..."
        cd ${{ steps.find-maven.outputs.maven_dir }}
        
        # Mostra informações detalhadas sobre falhas de teste
        if [ -d "target/surefire-reports" ]; then
          echo "📋 Relatórios encontrados em target/surefire-reports/"
          ls -la target/surefire-reports/
          
          # Mostra conteúdo dos arquivos de erro se existirem
          echo "🔍 Verificando falhas de teste..."
          if ls target/surefire-reports/*-output.txt 1> /dev/null 2>&1; then
            echo "📄 Saída dos testes:"
            cat target/surefire-reports/*-output.txt
          fi
          
          if ls target/surefire-reports/TEST-*.xml 1> /dev/null 2>&1; then
            echo "📊 Resumo dos testes:"
            grep -h "testcase.*failure\|testcase.*error\|testsuite" target/surefire-reports/TEST-*.xml | head -20
          fi
        else
          echo "⚠️ Nenhum relatório de teste encontrado"
        fi
        
        # Verifica logs do Spring Boot se existirem
        if [ -f "target/spring.log" ]; then
          echo "📜 Últimas linhas do log do Spring:"
          tail -50 target/spring.log
        fi
    
    - name: Check code quality (optional)
      continue-on-error: true  # Não falha se não tiver configurado
      run: |
        echo "🔍 Verificando qualidade do código..."
        cd ${{ steps.find-maven.outputs.maven_dir }}
        # Executar verificações de estilo se tiver configurado
        mvn checkstyle:check -DskipTests=true || echo "⚠️  Checkstyle não configurado"
        
        # SpotBugs se tiver configurado  
        mvn spotbugs:check -DskipTests=true || echo "⚠️  SpotBugs não configurado"
    
    - name: Check if PR already exists
      id: check-pr
      run: |
        # Verifica se já existe um PR para esta branch
        PR_EXISTS=$(gh pr list --head "${GITHUB_REF_NAME}" --state open --json number --jq '. | length')
        echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Pull Request
      if: steps.check-pr.outputs.pr_exists == '0'
      run: |
        # Define a branch base (padrão: main)
        BASE_BRANCH="main"
        
        # Lógica para determinar branch base baseada no nome da branch
        if [[ "${GITHUB_REF_NAME}" == feature/* ]]; then
          BASE_BRANCH="developer"  # Features vão para developer
        elif [[ "${GITHUB_REF_NAME}" == "developer" ]]; then
          BASE_BRANCH="main"       # Developer vai para main
        fi
        
        # Gera título do PR baseado no nome da branch
        PR_TITLE=$(echo "${GITHUB_REF_NAME}" | sed 's/.*\///g' | sed 's/-/ /g' | sed 's/\b\w/\u&/g')
        
        # Gera corpo do PR com informações do último commit
        LAST_COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
        LAST_COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
        
        PR_BODY="## Alterações
        
        Últimas alterações feitas nesta branch:
        - **Último commit:** $LAST_COMMIT_MESSAGE
        - **Autor:** $LAST_COMMIT_AUTHOR
        
        ## ✅ Verificações Automatizadas
        - [x] **Build Maven**: Compilação bem-sucedida
        - [x] **Testes unitários**: Todos os testes passaram
        - [x] **Java 21**: Compatibilidade verificada
        - [x] **Spring Boot 3.5.0**: Dependências resolvidas
        
        ## Tecnologias do Projeto
        - **Java**: 21
        - **Spring Boot**: 3.5.0
        - **Banco**: PostgreSQL
        - **Segurança**: Spring Security + JWT
        - **Mapeamento**: MapStruct + Lombok
        
        ## Tipo de mudança
        - [ ] Bug fix
        - [ ] Nova funcionalidade  
        - [ ] Breaking change
        - [ ] Documentação
        - [ ] Refatoração
        
        ## Checklist
        - [x] Código compilado sem erros
        - [x] Testes unitários passando
        - [x] Dependências Maven resolvidas
        - [ ] Documentação atualizada
        - [ ] Code review solicitado
        
        ---
        *PR criado automaticamente via GitHub Actions*
        *Build e testes executados automaticamente*"
        
        # Cria o Pull Request
        gh pr create \
          --title "✅ $PR_TITLE" \
          --body "$PR_BODY" \
          --base "$BASE_BRANCH" \
          --head "${GITHUB_REF_NAME}" \
          --assignee "@me"
        
        echo "✅ Pull Request criado automaticamente!"
        echo "🧪 Testes executados com sucesso!"
        echo "📋 Título: ✅ $PR_TITLE"
        echo "🎯 Base: $BASE_BRANCH <- ${GITHUB_REF_NAME}"
        
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: PR already exists
      if: steps.check-pr.outputs.pr_exists != '0'
      run: |
        echo "ℹ️  Pull Request já existe para a branch ${GITHUB_REF_NAME}"
        gh pr list --head "${GITHUB_REF_NAME}" --state open
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
